Fitting GAMs in practice
========================
author: David L Miller
css: custom.css
transition: none


Overview
=========

- Introduction to some data
- Fitting and plotting simple models

```{r setup, include=FALSE}
library(knitr)
library(viridis)
library(ggplot2)
library(reshape2)
library(animation)
library(mgcv)
opts_chunk$set(cache=TRUE, echo=FALSE)
```


Data
====
type:section


Extinction experiment
=====================

- 60 populations of `Daphnia magna` grown in lab
- 1/2 in constant conditions, 1/2 in "deteriorating"
- Data from Drake & Griffen (Nature [doi:10.1038/nature09389](http://doi.org/10.1038/nature09389))

![D. magna doi:10.1371/journal.pbio.0030253](images/Daphnia_magna.png)

<small>Photo credit [doi:10.1371/journal.pbio.0030253](http://doi.org/10.1371/journal.pbio.0030253)</small>


Extinction experiment
=====================

```{r data-extinct, fig.width=12, fig.height=8}
load("../data/drake_griffen/drake_griffen.RData")
populations$Treatment <- "Control"
populations$Treatment[populations$deteriorating] <- "Deteriorating"
p <- ggplot(populations) +
  geom_point(aes(x=day, y=Nhat, colour=Treatment, group=ID)) +
  geom_vline(xintercept=154) +
  labs(y="Count") +
  theme_minimal() +
  theme(text=element_text(size=20))
print(p)
```




Pantropical spotted dolphins
==============================

- Example taken from Miller et al (2013)
- [Paper appendix](http://distancesampling.org/R/vignettes/mexico-analysis.html) has a better analysis
- Simple example here, ignoring all kinds of important stuff!

![a pantropical spotted dolphin doing its thing](images/spotteddolphin_swfsc.jpg)








Inferential aims
=================

```{r loaddat}
load("../data/mexdolphins/mexdolphins.RData")
```

```{r gridplotfn}
library(rgdal)
library(rgeos)
library(maptools)
library(plyr)
# fill must be in the same order as the polygon data
grid_plot_obj <- function(fill, name, sp){

  # what was the data supplied?
  names(fill) <- NULL
  row.names(fill) <- NULL
  data <- data.frame(fill)
  names(data) <- name

  spdf <- SpatialPolygonsDataFrame(sp, data)
  spdf@data$id <- rownames(spdf@data)
  spdf.points <- fortify(spdf, region="id")
  spdf.df <- join(spdf.points, spdf@data, by="id")

  # seems to store the x/y even when projected as labelled as
  # "long" and "lat"
  spdf.df$x <- spdf.df$long
  spdf.df$y <- spdf.df$lat

  geom_polygon(aes_string(x="x",y="y",fill=name, group="group"), data=spdf.df)
}
```

- How many dolphins are there?
- Where are the dolphins?
- What are they interested in?

```{r spatialEDA, fig.cap="", fig.width=15}
# some nearby states, transformed
library(mapdata)
map_dat <- map_data("worldHires",c("usa","mexico"))
lcc_proj4 <- CRS("+proj=lcc +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs ")
map_sp <- SpatialPoints(map_dat[,c("long","lat")])

# give the sp object a projection
proj4string(map_sp) <-CRS("+proj=longlat +datum=WGS84")
# re-project
map_sp.t <- spTransform(map_sp, CRSobj=lcc_proj4)
map_dat$x <- map_sp.t$long
map_dat$y <- map_sp.t$lat

pred.polys <- spTransform(pred_latlong, CRSobj=lcc_proj4) 
p <- ggplot() +
      grid_plot_obj(preddata$depth, "Depth", pred.polys) + 
      geom_line(aes(x, y, group=Transect.Label), data=mexdolphins) +
      geom_polygon(aes(x=x, y=y, group = group), fill = "#1A9850", data=map_dat) +
      geom_point(aes(x, y, size=count),
                 data=mexdolphins[mexdolphins$count>0,],
                 colour="red", alpha=I(0.7)) +
      coord_fixed(ratio=1, ylim = range(mexdolphins$y), xlim = range(mexdolphins$x)) +
      scale_fill_viridis(direction=-1) +
      labs(fill="Depth",x="x",y="y",size="Count") +
      theme_minimal()
#p <- p + gg.opts
print(p)
```

What about a practical example?
================================
type:section

Translating maths into R
==========================

A simple example:

$$
y_i = \beta_0 + s(x) + s(w) + \epsilon_i
$$

where $\epsilon_i \sim N(0, \sigma^2)$

Let's pretend that $y_i \sim \text{Normal}$

- linear predictor: `formula = y ~ s(x) + s(w)`
- response distribution: `family=gaussian()`
- data: `data=some_data_frame` 

Putting that together
======================

```{r echo=TRUE, eval=FALSE}
my_model <- gam(y ~ s(x) + s(w),
                family = gaussian(),
                data = some_data_frame,
                method = "REML")
```

- `method="REML"` uses REML for smoothness selection (default is `"GCV.Cp"`)

A simple dolphin model
===============

```{r firstdsm, echo=TRUE}
library(mgcv)
dolphins_depth <- gam(count ~ s(depth) + offset(off.set),
                      data = mexdolphins,
                      family = quasipoisson(),
                      method = "REML")
```

- count is a function of depth
- `off.set` is the effort expended
- we have count data, try quasi-Poisson distribution

What did that do?
===================

```{r echo=TRUE}
summary(dolphins_depth)
```

Plotting
================

```{r plotsmooth}
plot(dolphins_depth)
```
***
- `plot(dolphins_depth)`
- Dashed lines indicate +/- 2 standard errors
- Rug plot
- On the link scale
- EDF on $y$ axis

Thin plate regression splines
================================

- Default basis
- One basis function per data point
- Reduce # basis functions (eigendecomposition)
- Fitting on reduced problem
- Multidimensional
- Wood (2003)


Bivariate terms
================

- Assumed an additive structure
- No interaction
- We can specify `s(x,y)` (and `s(x,y,z,...)`)
- (Assuming *isotropy* here...)

```{r xydsmplot, fig.width=15, fig.height=7}
dolphins_depth_xy <- gam(count ~ s(x, y) + offset(off.set),
                 data = mexdolphins,
                 family=quasipoisson(), method="REML")
par(mfrow=c(1,3))
vis.gam(dolphins_depth_xy, view=c("x","y"), phi=45, theta=20, asp=1)
vis.gam(dolphins_depth_xy, view=c("x","y"), phi=45, theta=60, asp=1)
vis.gam(dolphins_depth_xy, view=c("x","y"), phi=45, theta=160, asp=1)
```

Adding a term
===============

- Add a **surface** for location ($x$ and $y$)
- Just use `+` for an extra term

```{r xydsm, echo=TRUE}
dolphins_depth_xy <- gam(count ~ s(depth) + s(x, y) + offset(off.set),
                 data = mexdolphins,
                 family=quasipoisson(), method="REML")
```


Summary
===================

```{r echo=TRUE}
summary(dolphins_depth_xy)
```


Let's try something different
===============================

```{r plot-scheme2, echo=TRUE, fig.width=10}
plot(dolphins_depth_xy, select=2, cex=2, asp=1, lwd=2, scheme=2)
```
- `scale=0`: each plot on different scale
- `select=` picks which smooth to plot
- `scheme=2` much better for bivariate terms
- `vis.gam()` also useful


Fitting/plotting GAMs summary
=============================

- `gam` does all the work
- very similar to `glm`
- `s` indicates a smooth term
- `plot`/`vis.gam` for plots

